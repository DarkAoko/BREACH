<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_move</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_block</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///startup
//frames to auto switch
auto = -1;
alarm[0]= auto;
//vertical speed
ver = 0;
//horizontal speed
hor = 0;
//(init delay) speeds
d_ver =0;
d_hor =0;
//tread speeds
t_ver =0;
t_hor =0;
///limit the distance block and travel from original pos
move_x = -1;
move_y = -1;
//delay before player collide start
delay=120;
//can pass through block?
pass=false;
//create a clone of block after a time
clone=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create block clone
block = instance_create(xstart,ystart,object_index);
block.sprite_index = sprite_index;
block.image_xscale = image_xscale;
block.image_yscale = image_yscale;
block.image_angle = image_angle;
block.image_alpha = image_alpha;
block.image_speed = image_speed;
block.d_ver =d_ver;
block.d_hor =d_hor;
block.clone = clone;
block.pass = pass;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delay momevent and clone
hor = d_hor;
ver = d_ver;
if clone{
    alarm[7]=180;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Auto speed flip
hor *= -1;
ver *= -1;

alarm[0]=auto;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement
//update pos
x += hor;
y += ver;
//flip speeds on block collide    
if !pass{
    if (place_meeting(x+hor,y,obj_block) and hor&gt;0)
    or (place_meeting(x-hor,y,obj_block) and hor&lt;0){
        hor *= -1;
        }
    if (place_meeting(x,y+ver,obj_block) and ver&gt;0)
    or (place_meeting(x,y-ver,obj_block) and ver&lt;0){
        ver *= -1;
        }
    }
if (place_meeting(x+hor,y,obj_move_flip) and hor&gt;0)
or (place_meeting(x-hor,y,obj_move_flip) and hor&lt;0){
    hor *= -1;
    }
if (place_meeting(x,y+ver,obj_move_flip) and ver&gt;0)
or (place_meeting(x,y-ver,obj_move_flip) and ver&lt;0){
    ver *= -1;
    }
//look for player on top
if place_meeting(x,y-32,PLAYER) {
    PLAYER.hor=hor + t_hor;//align movement with hor and add tread movement
    if PLAYER.speedy=0{
        PLAYER.ver=ver;//align vertial speeds 
        with (PLAYER){
            //reset standing state
            speedy=0;rising=false;falling=false;jumping=false;grounded=true;
            //adjust x pos unless it will collide with a block
            if !place_meeting(x+hor,y,obj_block){x += hor;}
            //adjust y pos
            y += ver;
        }
    }
}

//flip speed if out of move limit   
if (y=move_y and move_y &gt; -1 and move_y&lt;ystart and ver &lt; 0) or (y=move_y and move_y &gt; -1 and move_y&gt;ystart and ver &gt; 0){
    ver *= -1;
    }
if (x=move_x and move_x &gt; -1 and move_x&lt;xstart and hor &lt; 0) or (x=move_x and move_x &gt; -1 and move_x&gt;xstart and hor &gt; 0){
    hor *= -1;
    }
    
if (y=ystart and move_y &gt; -1 and move_y&lt;ystart and ver &gt; 0) or (y=ystart and move_y &gt; -1 and move_y&gt;ystart and ver &lt; 0){
    ver *= -1;
    }
if (x=xstart and move_x &gt; -1 and move_x&lt;xstart and hor &gt; 0) or (x=xstart and move_x &gt; -1 and move_x&gt;xstart and hor &lt; 0){
    hor *= -1;
    }
//start delay upon player collide    
if place_meeting(x,y-32,PLAYER) and (d_hor !=0 or d_ver !=0) and alarm[2]=-1 and (hor =0 and ver =0) and alarm[5]=-1{
    alarm[2]=30;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if y&gt;room_height
or y&lt;0
or x&gt;room_width
or x&lt;0{

delay -= 1;

if delay &lt;=0{
    instance_create(xstart,ystart,object_index);
    instance_destroy();
    }

}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
