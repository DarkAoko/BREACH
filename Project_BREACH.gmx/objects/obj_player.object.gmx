<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_morgan_coat_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>PLAYER</parentName>
  <maskName>spr_hero_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
//create hud
if !instance_exists(CAMERA){instance_create(x,y,CAMERA);}
//create light
if !instance_exists(obj_light){instance_create(x,y,obj_light);}
hud_border = 0;
//Facing 1-right -1-left
facing=1;
//horizontal speed
speedx=0;
//vertical speed
speedy=.1;
//walk speed
speed_walk = 4;
//jump speed
speed_jump = -13;
//max fall speed
speed_fall = 8;
//acceleration
speed_fric = speed_walk;
//acceleration
speed_shoot = speed_walk;
//deceleration
speed_accel = speed_walk;
//falling rate
speed_grav = 0.55;
//no input state
acting=false;
//walking state
walking=false;
//going up state
rising=false;
//going down state
falling=false;
//using vac/water
shooting=false;
//jumping
jumping=false;
//on solid ground
grounded=false;
//damage frames *5 per frame
hit_frame=24;
//can be hurt
canhurt=true;
//Can vac
canshoot=true;
//Aiming | 1 = up, -1 = down
aiming = 0;
//affected by windup
upwind=false;
//where projectile shoots from
gun_x=0;gun_y=0;
//Slowed By Loucas
loucas = 0;
//On cam
on_cam=true;
//draw sprite?
sight=true;
//pos change when riding move
hor=0;
ver=0;
up=0;
c_rotation = 0;
//door position change
if warp_x &gt;0 and warp_y &gt;0{
    x=warp_x;
    y=warp_y;
}
    warp_x = 0;
    warp_y = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sprite setup - Default
if P1_COSTUME=0{
mask_index      = spr_morgan_coat_mask;
sprite_idle     = spr_morgan_coat_idle;
sprite_run      = spr_morgan_coat_run;
sprite_jump     = spr_morgan_coat_jump;
sprite_shoot    = spr_morgan_coat_shoot;

sprite_Didle    = spr_morgan_coat_idle_down;
sprite_Uidle    = spr_morgan_coat_idle_up;
sprite_Drun     = spr_morgan_coat_run_down;
sprite_Urun     = spr_morgan_coat_run_up;
sprite_Ujump    = spr_morgan_coat_jump_up;
sprite_Djump    = spr_morgan_coat_jump_down;

sprite_front    = spr_morgan_coat_front;
sprite_back     = spr_morgan_coat_back;

sprite_run_legs = spr_morgan_coat_run_legs;
sprite_run_arm  = spr_morgan_coat_run_arm;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Loucas
loucas=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blnking invincible sprite
    alarm[2]=5;
    hit_frame -= 1;
    if hit_frame=0{
    sight=true;
    hit_frame = 24;
    canhurt=true;
    alarm[2]=-1;
    exit;
    }
    if sight{sight=false;exit;}
    if !sight{sight=true;exit;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shooting off
shooting=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision Correction

//prevent block clipping
if !acting{ 
 if  (place_meeting(x,y,obj_block) or place_meeting(x,y,obj_block_pass_dummy)and speedy=0)
  {y-=1;}
//when on solid ground
if place_meeting(x,y+2,obj_block_pass_dummy) and speedy&gt;0{
grounded=true;}  
//room borders
x = clamp(x,0,room_width);
y = clamp(y,0,room_height);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
if acting=false{
///////////////Normal/////////////////////////////////
//if press right and not front of block
        if (PRESS_RIGHT) and !place_meeting(x+speedx,y,obj_block){
        //if not on slope, increase speed
           speedx += speed_accel;
            //if using vac, lock direction
            facing = 1;
            walking = true;
            //slope up
            if collision_rectangle(x,bbox_top,bbox_right+1,bbox_bottom,obj_slope_right,true,true){
                y -= abs(speedx)/2;
            }
            //slope down
            if collision_rectangle(x,bbox_top,bbox_right+1,bbox_bottom+16,obj_slope_left,true,true){
                y += abs(speedx)/2;
            }
        }
//if press left and not front of block
        if (PRESS_LEFT) and !place_meeting(x-abs(speedx),y,obj_block){
        //if not on slope, increase speed
            speedx -= speed_accel;
            //if using vac, lock direction
            facing = -1;
            walking = true;
            //slope up
            if collision_rectangle(x,bbox_top,bbox_left-1,bbox_bottom,obj_slope_left,true,true){
                y -= abs(speedx)/2;
            }
            //slope down
            if collision_rectangle(x,bbox_top,bbox_left+1,bbox_bottom+16,obj_slope_right,true,true){
                y += abs(speedx)/2;
            }
        }
//if walking in front of block        
        if (speedx&gt;0) and place_meeting(x+speedx,y,obj_block)
        and !collision_rectangle(x,bbox_top,bbox_right+1,bbox_bottom,obj_slope_right,true,true)
        and !collision_rectangle(x,bbox_top,bbox_right+1,bbox_bottom+16,obj_slope_left,true,true){
            speedx = 0;
            if (!shooting) {facing = 1;}
            walking = true;
        }
        if (speedx&lt;0) and place_meeting(x-abs(speedx),y,obj_block)
        and !collision_rectangle(x,bbox_top,bbox_left-1,bbox_bottom,obj_slope_left,true,true)
        and !collision_rectangle(x,bbox_top,bbox_left+1,bbox_bottom+16,obj_slope_right,true,true){
            speedx = 0;
            if (!shooting) {facing = -1;}
            walking = true;
        }        
        
//Jumping        
        if( (PRESS_A) and grounded and speedy=0) or ((PRESS_A) and place_meeting(x,y+2,obj_block_pass_dummy)) {
            speedy = speed_jump;
            jumping=true;
        }
//Spring Jump
        bounce_snap = collision_rectangle( bbox_left, bbox_bottom, bbox_right, bbox_bottom+1, obj_bounce, false, true );
        if bounce_snap != noone and (speedy&gt;0){
                speedy = speed_jump * 1.60;
                bounce_snap.image_speed=1;
            }
//Short Hop            
        if RELEASE_A and jumping and (speedy &lt; 0){
            speedy /= 4;
            jumping=false;
        }
//Head Bump        
        if place_meeting(x,y+speedy,obj_block) and speedy&lt;0{
           speedy=4;
            }
//Aiming
        if (PRESS_UP) and !(PRESS_DOWN){
            aiming = 1;
            }
        if !(PRESS_UP) and (PRESS_DOWN){
            aiming = -1;
            }
        if !(PRESS_UP) and !(PRESS_DOWN){
            aiming = 0;
            }
  if speedy&gt;0{falling=true;rising=false;}  if speedy&lt;0{falling=false;rising=true;} if speedy=0{falling=false;rising=false;}      
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Changer

//idle
if !acting and !walking and !rising and !falling and !shooting
and grounded{
    image_speed = .18;
    if aiming = 0{
        sprite_index = sprite_idle;
        gun_x = x + (31 * facing);
        gun_y = y + 5; 
        }
    if aiming = 1{
        sprite_index = sprite_Uidle;
        gun_x = x + (1 * facing);
        gun_y = y - 10; 
        }
    if aiming = -1{
        sprite_index = sprite_Didle;
        gun_x = x + (5 * facing);
        gun_y = y + 33; 
        }
    }
//shooting
if !acting and !walking and !rising and !falling and shooting
and grounded{
    image_speed = .18;
    if aiming = 0{
        sprite_index = sprite_shoot;
        gun_x = x + (31 * facing);
        gun_y = y + 5; 
        }
    if aiming = 1{
        sprite_index = sprite_Uidle;
        gun_x = x + (1 * facing);
        gun_y = y - 10; 
        }
    if aiming = -1{
        sprite_index = sprite_Didle;
        gun_x = x + (5 * facing);
        gun_y = y + 33; 
        }
    }
//running
if !acting and walking  and !rising and !falling and grounded{
    image_speed = .33;
    if aiming = 0{
        sprite_index = sprite_run;
        }
    if aiming = 1{
        sprite_index = sprite_Urun;
        gun_x = x + (5 * facing);
        gun_y = y - 10; 
        }
    if aiming = -1{
        sprite_index = sprite_Drun;
        gun_x = x + (10 * facing);
        gun_y = y + 33;
        }
    }
//jumping up
if !acting and rising and !falling
{
    image_index = 0;
    image_speed = 0;
    if aiming = 0{
        sprite_index = sprite_jump;
        gun_x = x + (31 * facing);
        gun_y = y + 5; 
        }
    if aiming = 1{
        sprite_index = sprite_Ujump;
        gun_x = x + (1 * facing);
        gun_y = y - 10; 
        }
    if aiming = -1{
        sprite_index = sprite_Djump;
        gun_x = x + (5 * facing);
        gun_y = y + 33; 
        }
    }
//jumping down
if !acting and falling and !rising
{
    image_index = 1;
    image_speed = 0;
    if aiming = 0{
        sprite_index = sprite_jump;
        gun_x = x + (31 * facing);
        gun_y = y + 5; 
        }
    if aiming = 1{
        sprite_index = sprite_Ujump;
        gun_x = x + (1 * facing);
        gun_y = y - 10; 
        }
    if aiming = -1{
        sprite_index = sprite_Djump;
        gun_x = x + (5 * facing);
        gun_y = y + 33; 
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Speed Modifiers
if acting=false {
if !place_meeting(x,y,obj_water) and loucas=0{
    x += speedx/2;
    if !upwind{y += speedy;}
    if !place_meeting(x,y-up,obj_block){y -= up;}
    speed_grav = 1;
    speed_fall = 25;
    }
if place_meeting(x,y,obj_water) and loucas=0{
    x += (speedx/2);
    y += speedy*.5;
    speed_grav = .5;
    speed_fall = 15;
    }
if loucas&gt;0 {
    x += (speedx/2)/loucas;
    y += speedy/2;
    }
if(place_meeting(x,y+16,obj_block) or place_meeting(x,y+16,obj_block_pass_dummy) ){
    speed_fric = speed_walk;
    speed_accel = speed_walk;
}
if(place_meeting(x,y+16,obj_ice)){
    speed_fric = .05;
    speed_accel = speed_walk*.75;
    if (!PRESS_LEFT and !PRESS_RIGHT) and speedx&gt;0{
        speedx -= speed_fric;
        }
    if (!PRESS_LEFT and !PRESS_RIGHT) and speedx&lt;0{
        speedx += speed_fric; 
        }
}
if(!place_meeting(x,y+16,obj_ice)){
    if (!PRESS_LEFT and !PRESS_RIGHT){
        speedx = 0;
        }
}
if speedx=0{
    walking = false;
}
    if shooting =false and walking=true and speedx &gt; speed_walk{
        speedx = speed_walk;
        }
    if shooting =false and walking=true and speedx &lt; -(speed_walk){
        speedx = -(speed_walk);
        }
    if shooting =true and speedx &lt; -(speed_shoot){
        speedx = -(speed_shoot);
        }
    if shooting =true and speedx &gt; speed_shoot{
        speedx = speed_shoot;
        }
    if grounded = false {
        speedy += speed_grav;
        }
        if speedy &gt; speed_fall{speedy = speed_fall;}
if place_meeting(x,y,obj_slope_right) or place_meeting(x,y,obj_slope_left){
speedy=0;rising=false;falling=false;jumping=false;fall_time=0;grounded=true;
}
floor_snap = collision_rectangle( bbox_left, bbox_bottom, bbox_right, bbox_bottom+1, obj_block, false, true );
if floor_snap &gt; -1 and speedy&gt;=0{
speedy=0;rising=false;falling=false;jumping=false;fall_time=0;grounded=true;
y = floor_snap.bbox_top - sprite_get_height(mask_index * image_yscale) + sprite_get_yoffset(mask_index);
} 
pass_snap = collision_rectangle( bbox_left, bbox_bottom, bbox_right, bbox_bottom+1, obj_block_pass_dummy, false, true );
if pass_snap &gt; -1 and speedy&gt;=0{
speedy=0;rising=false;falling=false;jumping=false;fall_time=0;grounded=true;
y = pass_snap.bbox_top - sprite_get_height(mask_index * image_yscale) + sprite_get_yoffset(mask_index);
}
if !place_meeting(x,y+6,obj_block) and !place_meeting(x,y+6,obj_block_pass_dummy)
and !place_meeting(x,y+6,obj_slope_right) and !place_meeting(x,y+6,obj_slope_left){
    grounded = false;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gunplay 
if !acting and !LOADING{
//Shoot
if PRESS_B and canshoot=true{
    audio_play_sound_on(s_sfx,sound0,false,10);
    shooting = true;
    if light_room &gt; .5{instance_create(gun_x,gun_y,obj_light_player_flash);}
    fx = instance_create(gun_x,gun_y,EFFECT);
    fx.sprite_index = spr_hero_shot_0_spray;
    fx.depth = depth-1;
    fx.image_speed = .5;
    shot = instance_create(gun_x,gun_y,obj_player_shot_0);
    shot.image_xscale = facing;
    if aiming = 0{shot.hspeed = 10 * shot.image_xscale;}
    if aiming != 0{shot.image_angle = 90;shot.vspeed = 10 * -aiming;shot.image_yscale = -aiming;}
    alarm[0]=120;
    }
//Toggle Flashlight
if PRESS_C{
        if light_player=true{light_player=false;instance_destroy(light);exit;}
        if light_player=false{light_player=true;light=instance_create(x,y,obj_light_player);exit;}
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="HAZARD">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Call damage function
scr_player_damage();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ENEMY">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Call damage function
scr_player_damage();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw sprite on screen
if sight{
    draw_sprite_ext(sprite_index,image_index,x,y,facing,image_yscale,image_angle,image_blend,image_alpha);
    if sprite_index = sprite_run{
        draw_sprite_ext(sprite_run_legs,image_index,x,y,facing,image_yscale,image_angle,image_blend,image_alpha);
        draw_sprite_ext(sprite_run_arm,image_index,x,y,facing,image_yscale,image_angle,image_blend,image_alpha);
        }
    if P1_WEAPON = 1{
        if sprite_index = sprite_run{draw_sprite_ext(spr_morgan_gun_shock,image_index,gun_x,gun_y,facing,image_yscale,image_angle,image_blend,image_alpha);}
        }
            
    }
draw_set_colour(c_red);
draw_circle(gun_x,gun_y,5,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto_previous();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Next Room DEBUG
if !keyboard_check(vk_alt){
    room_goto_next();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
