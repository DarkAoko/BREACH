<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_morgan_coat_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>PLAYER</parentName>
  <maskName>spr_hero_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
//create hud
if !instance_exists(CAMERA){instance_create(x,y,CAMERA);}
//create light
if !instance_exists(obj_light){instance_create(x,y,obj_light);}
hud_border = 0;
//Facing 1-right -1-left
facing=1;
//horizontal speed
speedx=0;
//vertical speed
speedy=.1;
//walk speed
speed_walk = 4;
//jump speed
speed_jump = -13;
//max fall speed
speed_fall = 8;
//acceleration
speed_fric = speed_walk;
//acceleration
speed_shoot = speed_walk;
//deceleration
speed_accel = speed_walk;
//falling rate
speed_grav = 0.0055;
//no input state
acting=false;
//walking state
walking=false;
//going up state
rising=false;
//going down state
falling=false;
//using vac/water
shooting=false;
//jumping
jumping=false;
//on solid ground
grounded=false;
//damage frames *5 per frame
hit_frame=24;
//can be hurt
canhurt=true;
//Can vac
canshoot=true;
shot_level=1;
//Aiming | 1 = up, -1 = down
aiming = 0;
//Aim | degrees circle counter clockwise from right
aim = 0;
//number of rapid fire shots
rapid = 4;
//affected by windup
upwind=false;
//where projectile shoots from
gun_x=0;gun_y=0;
//Slowed By Loucas
loucas = 0;
//On cam
on_cam=true;
//draw sprite?
sight=true;
//pos change when riding move
hor=0;
ver=0;
up=0;
c_rotation = 0;
//weapon charge
charging = false;
chargemax = false;
//arm position
arm_position = ds_grid_create(1,12);
//arm object
arms = -1;
//grapple object
grapple = -1;
hanging = false;
autohang = false;
//stick combo step
stick = 0;
//stick combo advance
sticknext = false;
//stick hitbox
stickmask = -1;
//time to idle anim
idle_time = 600;
//door position change
if warp_x &gt;0 and warp_y &gt;0{
    x=warp_x;
    y=warp_y;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sprite setup - Default
if P1_COSTUME=0{
mask_index      = spr_morgan_coat_mask;
sprite_idle     = spr_morgan_coat_ready;
sprite_run      = spr_morgan_coat_run;
sprite_jump     = spr_morgan_coat_jump;
sprite_shoot    = spr_morgan_coat_shoot;

sprite_Didle    = spr_morgan_coat_idle_down;
sprite_Uidle    = spr_morgan_coat_idle_up;
sprite_Drun     = spr_morgan_coat_run_down;
sprite_Urun     = spr_morgan_coat_run_up;
sprite_Ujump    = spr_morgan_coat_jump_up;
sprite_Djump    = spr_morgan_coat_jump_down;

sprite_front    = spr_morgan_coat_front;
sprite_back     = spr_morgan_coat_back;

sprite_run_legs = spr_morgan_coat_run_legs;
sprite_run_arm  = spr_morgan_coat_run_arm;

sprite_damage   = spr_morgan_coat_damage;

sprite_stick1   = spr_morgan_coat_stick_1;
sprite_stick2   = spr_morgan_coat_stick_2;
sprite_stick3   = spr_morgan_coat_stick_3;
sprite_sticka   = spr_morgan_coat_stick_air;

sprite_wait     = spr_morgan_coat_idle;

guns = ds_grid_create(2,5);
ds_grid_add(guns,0,1,spr_morgan_gun_shock);
ds_grid_add(guns,0,2,spr_morgan_gun_stick);
ds_grid_add(guns,0,3,spr_morgan_gun_burst);
ds_grid_add(guns,0,4,spr_morgan_gun_blast);
ds_grid_add(guns,1,1,spr_morgan_coat_arm_recoil_shock);
ds_grid_add(guns,1,2,spr_morgan_coat_arm_recoil_shock);
ds_grid_add(guns,1,3,spr_morgan_coat_arm_recoil_shock);
ds_grid_add(guns,1,4,spr_morgan_coat_arm_recoil_shock);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Loucas
loucas=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin Charging
if HOLD_B{
    charging = true;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blnking invincible sprite
    alarm[2]=5;
    hit_frame -= 1;
    if hit_frame=0{
    sight=true;
    hit_frame = 24;
    canhurt=true;
    alarm[2]=-1;
    exit;
    }
    if sight{sight=false;exit;}
    if !sight{sight=true;exit;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rapid Burst
if rapid &gt; 0{
    if !PRESS_UP and !PRESS_DOWN and chargemax{
    //arm recoil
    arms = instance_create(x,y,obj_player_arm_recoil);
    arms.sprite_index = ds_grid_get(guns,1,P1_WEAPON);
    arms.owner = id;
        if sprite_index = sprite_idle{arms.x=x;arms.y=y;arms.image_xscale=facing;arms.image_yscale=image_yscale;arms.image_angle=0;arms.depth=1;}
        if sprite_index = sprite_jump{arms.x=x;arms.y=y;arms.image_xscale=facing;arms.image_yscale=image_yscale;arms.image_angle=0;arms.depth=1;}
        if sprite_index = sprite_shoot{arms.x=x;arms.y=y;arms.image_xscale=facing;arms.image_yscale=image_yscale;arms.image_angle=0;arms.depth=1;}
        if sprite_index = sprite_Didle{arms.x=x-(4*facing);arms.y=y+9;arms.image_xscale=facing;arms.image_yscale=-image_yscale;arms.image_angle=270*facing;arms.depth=-1;}
        if sprite_index = sprite_Uidle{arms.x=x-(5*facing);arms.y=y+12;arms.image_xscale=facing;arms.image_yscale=image_yscale;arms.image_angle=90*facing;arms.depth=1;}
        if sprite_index = sprite_run{arms.x=x;arms.y=y;arms.image_xscale=facing;arms.image_yscale=image_yscale;arms.image_angle=0;arms.depth=1;}
        if sprite_index = sprite_Drun{arms.x=x-(4*facing);arms.y=y+8;arms.image_xscale=facing;arms.image_yscale=-image_yscale;arms.image_angle=270*facing;arms.depth=1;}
        if sprite_index = sprite_Urun{arms.x=x-(5*facing);arms.y=y+12;arms.image_xscale=facing;arms.image_yscale=image_yscale;arms.image_angle=90*facing;arms.depth=1;}
        if sprite_index = sprite_Ujump{arms.x=x-(1*facing);arms.y=y+15;arms.image_xscale=facing;arms.image_yscale=image_yscale;arms.image_angle=90*facing;arms.depth=1;}
        if sprite_index = sprite_Djump{arms.x=x-(4*facing);arms.y=y+9;arms.image_xscale=facing;arms.image_yscale=-image_yscale;arms.image_angle=270*facing;arms.depth=1;}
        }
    audio_play_sound_on(s_sfx,sound0,false,10);
    if light_room &gt; .5{instance_create(gun_x,gun_y,obj_light_player_flash);}
    fx = instance_create(gun_x,gun_y,EFFECT);
    fx.sprite_index = spr_hero_shot_0_spray;
    fx.depth = depth-1;
    fx.image_speed = .5;
    shot = instance_create(gun_x,gun_y,obj_player_shot_burst);
    shot.direction = aim;
    shot.image_angle = aim * facing;
    rapid -= 1;
    alarm[0]=20;
    alarm[1]=5;
    exit;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shooting off
shooting=false;
canshoot=true;
rapid = 5;
chargemax=false;
stick=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Changer
scr_player_sprites();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Arm Position
scr_player_arm();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Changer
scr_player_sprites();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision Correction

//prevent block clipping
if !acting{ 
 if  (place_meeting(x,y,obj_block) or place_meeting(x,y,obj_block_pass_dummy)and speedy=0)
  {y-=1;}
//when on solid ground
if place_meeting(x,y+2,obj_block_pass_dummy) and speedy&gt;0{
grounded=true;}  
//room borders
x = clamp(x,0,room_width);
y = clamp(y,0,room_height);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Arm Position
scr_player_arm();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
if acting=false and !hanging{
///////////////Normal/////////////////////////////////
//if press right and not front of block
        if (PRESS_RIGHT) and !place_meeting(x+speedx,y,obj_block){
        //if not on slope, increase speed
           speedx += speed_accel;
            //if using vac, lock direction
            facing = 1;
            walking = true;
            //slope up
            if collision_rectangle(x,bbox_top,bbox_right+1,bbox_bottom,obj_slope_right,true,true){
                y -= abs(speedx)/2;
            }
            //slope down
            if collision_rectangle(x,bbox_top,bbox_right+1,bbox_bottom+16,obj_slope_left,true,true){
                y += abs(speedx)/2;
            }
        }
//if press left and not front of block
        if (PRESS_LEFT) and !place_meeting(x-abs(speedx),y,obj_block){
        //if not on slope, increase speed
            speedx -= speed_accel;
            //if using vac, lock direction
            facing = -1;
            walking = true;
            //slope up
            if collision_rectangle(x,bbox_top,bbox_left-1,bbox_bottom,obj_slope_left,true,true){
                y -= abs(speedx)/2;
            }
            //slope down
            if collision_rectangle(x,bbox_top,bbox_left+1,bbox_bottom+16,obj_slope_right,true,true){
                y += abs(speedx)/2;
            }
        }
//if walking in front of block        
        if (speedx&gt;0) and place_meeting(x+speedx,y,obj_block)
        and !collision_rectangle(x,bbox_top,bbox_right+1,bbox_bottom,obj_slope_right,true,true)
        and !collision_rectangle(x,bbox_top,bbox_right+1,bbox_bottom+16,obj_slope_left,true,true){
            speedx = 0;
            if (!shooting) {facing = 1;}
            walking = true;
        }
        if (speedx&lt;0) and place_meeting(x-abs(speedx),y,obj_block)
        and !collision_rectangle(x,bbox_top,bbox_left-1,bbox_bottom,obj_slope_left,true,true)
        and !collision_rectangle(x,bbox_top,bbox_left+1,bbox_bottom+16,obj_slope_right,true,true){
            speedx = 0;
            if (!shooting) {facing = -1;}
            walking = true;
        }        
        
//Jumping        
        if( (PRESS_A) and grounded and speedy=0) or ((PRESS_A) and place_meeting(x,y+2,obj_block_pass_dummy)) {
            speedy = speed_jump * PLAYER_JUMP;
            jumping=true;
        }
//Spring Jump
        bounce_snap = collision_rectangle( bbox_left, bbox_bottom, bbox_right, bbox_bottom+1, obj_bounce, false, true );
        if bounce_snap != noone and (speedy&gt;0){
                speedy = speed_jump * 1.60;
                bounce_snap.image_speed=1;
            }
//Short Hop            
        if RELEASE_A and jumping and (speedy &lt; 0){
            speedy /= 4;
            jumping=false;
        }
//Head Bump        
        if place_meeting(x,y+speedy,obj_block) and speedy&lt;0{
           speedy=4;
            }
//Aiming
        if (PRESS_UP) and !(PRESS_DOWN){
            aiming = 1;
            }
        if !(PRESS_UP) and (PRESS_DOWN){
            aiming = -1;
            }
        if !(PRESS_UP) and !(PRESS_DOWN){
            aiming = 0;
            }
  if speedy&gt;0{falling=true;rising=false;}  if speedy&lt;0{falling=false;rising=true;} if speedy=0{falling=false;rising=false;}     
//Idle timetown
if sprite_index = sprite_idle{
    idle_time -= 1;
    }
if sprite_index != sprite_idle and sprite_index != sprite_wait{
    idle_time = 600;
    } 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Speed Modifiers
if hanging = false{
    if !place_meeting(x,y,obj_water) and loucas=0{
        x += speedx/2;
        if !upwind{y += speedy;}
        if !place_meeting(x,y-up,obj_block){y -= up;}
        speed_grav = 1;
        speed_fall = 25;
        }
    if place_meeting(x,y,obj_water) and loucas=0{
        x += (speedx/2);
        y += speedy*.5;
        speed_grav = .5;
        speed_fall = 15;
        }
    if loucas&gt;0 {
        x += (speedx/2)/loucas;
        y += speedy/2;
        }
    if(place_meeting(x,y+16,obj_block) or place_meeting(x,y+16,obj_block_pass_dummy) ){
        speed_fric = speed_walk;
        speed_accel = speed_walk;
    }
    if(place_meeting(x,y+16,obj_ice)){
        speed_fric = .05;
        speed_accel = speed_walk*.75;
        if (!PRESS_LEFT and !PRESS_RIGHT) and speedx&gt;0{
            speedx -= speed_fric;
            }
        if (!PRESS_LEFT and !PRESS_RIGHT) and speedx&lt;0{
            speedx += speed_fric; 
            }
    }
    if(!place_meeting(x,y+16,obj_ice)){
        if (!PRESS_LEFT and !PRESS_RIGHT){
            speedx = 0;
            }
    }
    if speedx=0{
        walking = false;
    }
        if shooting =false and walking=true and speedx &gt; speed_walk{
            speedx = speed_walk;
            }
        if shooting =false and walking=true and speedx &lt; -(speed_walk){
            speedx = -(speed_walk);
            }
        if shooting =true and speedx &lt; -(speed_shoot){
            speedx = -(speed_shoot);
            }
        if shooting =true and speedx &gt; speed_shoot{
            speedx = speed_shoot;
            }
        if grounded = false {
            speedy += speed_grav;
            }
            if speedy &gt; speed_fall{speedy = speed_fall;}
    if place_meeting(x,y,obj_slope_right) or place_meeting(x,y,obj_slope_left){
    speedy=0;rising=false;falling=false;jumping=false;fall_time=0;grounded=true;
    }
    floor_snap = collision_rectangle( bbox_left, bbox_bottom, bbox_right, bbox_bottom+1, obj_block, false, true );
    if floor_snap &gt; -1 and speedy&gt;=0{
    speedy=0;rising=false;falling=false;jumping=false;fall_time=0;grounded=true;
    y = floor_snap.bbox_top - sprite_get_height(mask_index * image_yscale) + sprite_get_yoffset(mask_index);
    } 
    pass_snap = collision_rectangle( bbox_left, bbox_bottom, bbox_right, bbox_bottom+1, obj_block_pass_dummy, false, true );
    if pass_snap &gt; -1 and speedy&gt;=0{
    speedy=0;rising=false;falling=false;jumping=false;fall_time=0;grounded=true;
    y = pass_snap.bbox_top - sprite_get_height(mask_index * image_yscale) + sprite_get_yoffset(mask_index);
    }
    if !place_meeting(x,y+6,obj_block) and !place_meeting(x,y+6,obj_block_pass_dummy)
    and !place_meeting(x,y+6,obj_slope_right) and !place_meeting(x,y+6,obj_slope_left){
        grounded = false;
        }
    if grounded and sprite_index = sprite_damage{
        acting = false;
        canhurt=false; //can't be hurt
        alarm[2]=5;
        hit_frame = 24;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gunplay
if PRESS_B and P1_WEAPON = 2{
    if shooting=true{
        if sprite_index = sprite_stick1 or sprite_index = sprite_stick2 or sprite_index = sprite_stick3{
            sticknext=true;
            exit;
        }
    }
}
if !acting and !LOADING{
//charging
if charging{
    PLAYER_POWER += 1.5;
    }
if PLAYER_POWER &gt;= 99 and (PLAYER_LEVEL &lt; PLAYER_MAXLEVEL){
    PLAYER_LEVEL += 1;
    PLAYER_POWER = 0;
    }
if PLAYER_POWER &gt;= 99 and (PLAYER_LEVEL = PLAYER_MAXLEVEL){
    PLAYER_LEVEL += 1;
    chargemax = true;
    }
//Shoot
if (PRESS_B and canshoot=true) or (RELEASE_B and canshoot=true and PLAYER_POWER&gt;0 and arms = -1){
    if chargemax and !PRESS_UP and !PRESS_DOWN{
    //arm recoil
    arms = instance_create(x,y,obj_player_arm_recoil);
    arms.sprite_index = ds_grid_get(guns,1,P1_WEAPON);
    arms.owner = id;
        if sprite_index = sprite_idle{arms.x=x;arms.y=y;arms.image_xscale=facing;arms.image_yscale=image_yscale;arms.image_angle=0;arms.depth=1;}
        if sprite_index = sprite_jump{arms.x=x;arms.y=y;arms.image_xscale=facing;arms.image_yscale=image_yscale;arms.image_angle=0;arms.depth=1;}
        if sprite_index = sprite_shoot{arms.x=x;arms.y=y;arms.image_xscale=facing;arms.image_yscale=image_yscale;arms.image_angle=0;arms.depth=1;}
        if sprite_index = sprite_Didle{arms.x=x-(4*facing);arms.y=y+9;arms.image_xscale=facing;arms.image_yscale=-image_yscale;arms.image_angle=270*facing;arms.depth=-1;}
        if sprite_index = sprite_Uidle{arms.x=x-(5*facing);arms.y=y+12;arms.image_xscale=facing;arms.image_yscale=image_yscale;arms.image_angle=90*facing;arms.depth=1;}
        if sprite_index = sprite_run{arms.x=x;arms.y=y;arms.image_xscale=facing;arms.image_yscale=image_yscale;arms.image_angle=0;arms.depth=1;}
        if sprite_index = sprite_Drun{arms.x=x-(4*facing);arms.y=y+8;arms.image_xscale=facing;arms.image_yscale=-image_yscale;arms.image_angle=270*facing;arms.depth=1;}
        if sprite_index = sprite_Urun{arms.x=x-(5*facing);arms.y=y+12;arms.image_xscale=facing;arms.image_yscale=image_yscale;arms.image_angle=90*facing;arms.depth=1;}
        if sprite_index = sprite_Ujump{arms.x=x-(1*facing);arms.y=y+15;arms.image_xscale=facing;arms.image_yscale=image_yscale;arms.image_angle=90*facing;arms.depth=1;}
        if sprite_index = sprite_Djump{arms.x=x-(4*facing);arms.y=y+9;arms.image_xscale=facing;arms.image_yscale=-image_yscale;arms.image_angle=270*facing;arms.depth=1;}
        }
    if (!chargemax or PRESS_UP or PRESS_DOWN) and P1_WEAPON != 3 and P1_WEAPON != 2{
        alarm[0]=10;
        }
    //shock gun
    if P1_WEAPON = 1 and PLAYER_STATUS != 1{
        audio_play_sound_on(s_sfx,sound0,false,10);
        shooting = true;
        if light_room &gt; .5{instance_create(gun_x,gun_y,obj_light_player_flash);}
        fx = instance_create(gun_x,gun_y,EFFECT);
        fx.sprite_index = spr_hero_shot_0_spray;
        fx.depth = depth-1;
        fx.image_speed = .5;
        shot = instance_create(gun_x,gun_y,obj_player_shot_shock);
        shot.direction = aim;
        shot.image_angle = aim * facing;
    }
    //rapid fire
    if (P1_WEAPON = 3 and rapid &gt;= 4 and PLAYER_STATUS != 1) {
        rapid = 4 + PLAYER_LEVEL;
        shooting = true;
        alarm[1]=1;
    }
    //particle blast
    if P1_WEAPON = 4 and PLAYER_STATUS != 1{
        audio_play_sound_on(s_sfx,sound0,false,10);
        shooting = true;
        if light_room &gt; .5{instance_create(gun_x,gun_y,obj_light_player_flash);}
        fx = instance_create(gun_x,gun_y,EFFECT);
        fx.sprite_index = spr_hero_shot_0_spray;
        fx.depth = depth-1;
        fx.image_speed = .5;
        shot = instance_create(gun_x,gun_y,obj_player_shot_blast);
        shot.direction = aim;
        shot.image_angle = aim * facing;
        
        shot = instance_create(gun_x,gun_y,obj_player_shot_blast);
        shot.direction = aim + 5;
        shot.image_angle = (aim * facing) + 5;
        
        shot = instance_create(gun_x,gun_y,obj_player_shot_blast);
        shot.direction = aim + 355;
        shot.image_angle = (aim * facing) + 355;
        
        if PLAYER_LEVEL &gt;=2{
            shot = instance_create(gun_x,gun_y,obj_player_shot_blast);
            shot.direction = aim - 10;
            shot.image_angle = (aim * facing) - 10;
            }

        if PLAYER_LEVEL &gt;=3{
            shot = instance_create(gun_x,gun_y,obj_player_shot_blast);
            shot.direction = aim - 350;
            shot.image_angle = (aim * facing) - 350;
            }
            
        if PLAYER_LEVEL &gt;=4{
            shot = instance_create(gun_x,gun_y,obj_player_shot_blast);
            shot.direction = aim - 15;
            shot.image_angle = (aim * facing) - 15;
            }
            
        if PLAYER_LEVEL &gt;=5{
            shot = instance_create(gun_x,gun_y,obj_player_shot_blast);
            shot.direction = aim - 345;
            shot.image_angle = (aim * facing) - 345;
            }
        if PLAYER_LEVEL &gt;=6{
            shot = instance_create(gun_x,gun_y,obj_player_shot_blast);
            shot.direction = aim - 20;
            shot.image_angle = (aim * facing) - 20;
            }
            
        if PLAYER_LEVEL &gt;=7{
            shot = instance_create(gun_x,gun_y,obj_player_shot_blast);
            shot.direction = aim - 340;
            shot.image_angle = (aim * facing) - 340;
            }
    }
    //stick combo
     if P1_WEAPON = 2 and !hanging{
        if shooting=true{
            if sprite_index = sprite_stick1 or sprite_index = sprite_stick2 or sprite_index = sprite_stick3{
                sticknext=true;
                exit;
            }
        }
        acting=true;
        image_speed=.5;
        stickmask = instance_create(x,y,obj_player_shot_stick);
        stickmask.owner=id;
        image_index = 0;
        shooting=true;
        if grounded and stick=0{
            speedx = 0;
            sprite_index = sprite_stick1;
            exit;
        }
        if !grounded{
        sprite_index = sprite_sticka;stick=0;exit;}
        }
    charging=false;
    PLAYER_LEVEL = 1;
    PLAYER_POWER = 0;
    canshoot=false;
    alarm[3]=30;
}
//Toggle Flashlight
if PRESS_C{
        if light_player=true{light_player=false;instance_destroy(light);exit;}
        if light_player=false{light_player=true;light=instance_create(x,y,obj_light_player);exit;}
    } 
//Weapon Switch
if PRESS_L and canshoot{
    P1_WEAPON -= 1;
    if P1_WEAPON &lt; 1{P1_WEAPON = 4;}
    if P1_WEAPON = 1 and !prize_shock{P1_WEAPON -= 1;}
    if P1_WEAPON = 2 and !prize_stick{P1_WEAPON -= 1;}
    if P1_WEAPON = 3 and !prize_burst{P1_WEAPON -= 1;}
    if P1_WEAPON = 4 and !prize_blast{P1_WEAPON -= 1;}
    }
if PRESS_R and canshoot{
    P1_WEAPON += 1;
    if P1_WEAPON &gt; 4{P1_WEAPON = 1;}
    if P1_WEAPON = 1 and !prize_shock{P1_WEAPON += 1;}
    if P1_WEAPON = 2 and !prize_stick{P1_WEAPON += 1;}
    if P1_WEAPON = 3 and !prize_burst{P1_WEAPON += 1;}
    if P1_WEAPON = 4 and !prize_blast{P1_WEAPON += 1;}
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Grapple Glove
if !acting and !LOADING{
    //Shoot
    if (PRESS_G and canshoot=true and prize_glove and !instance_exists(obj_player_shot_glove)){
    if grounded{sprite_index = sprite_Uidle;}
    if !grounded{sprite_index = sprite_Ujump;}
    image_speed=0;
    acting = true;
    speedx = 0;
    grapple = instance_create(x,gun_y,obj_player_shot_glove);
    grapple.owner = id;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hanging Mode
if hanging{
    if PRESS_B and P1_WEAPON = 2 and stick=0{
        acting=true;
        image_speed=.5;
        stickmask = instance_create(x,y,obj_player_shot_stick);
        stickmask.owner=id;
        image_index = 0;
        shooting=true; 
        sprite_index = sprite_sticka;
        stick=1;
    }
    if stick=0{
        sprite_index = sprite_jump;
        acting=false;
        image_speed=0;
    }
    if PRESS_LEFT{
        facing = -1;
        }
    if PRESS_RIGHT{
        facing = 1;
        }
    if PRESS_UP and !place_meeting(x,y-16,obj_block){
        y -= 5;
    }
    if PRESS_DOWN and !place_meeting(x,y+16,obj_block){
        y += 5;
    }
    if autohang {
        y -= 10;
        }
    if place_meeting(x,y-16,obj_block){
        autohang=false;
        }
    if PRESS_A{
        instance_destroy(grapple);
        hanging=false;
        speedy = speed_jump;
        jumping=true;
    }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Map Position
scr_map_pos();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="HAZARD">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Call damage function
scr_player_knockback();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ENEMY">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Call damage function
scr_player_damage();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stick Combo
if sprite_index = sprite_stick1 or sprite_index = sprite_stick2{
    if sticknext{
        image_index = 0;
        sticknext = false;
        stickmask = instance_create(x,y,obj_player_shot_stick);
        stickmask.owner=id;
        if sprite_index = sprite_stick1{sprite_index = sprite_stick2;stick=2;exit;}
        if sprite_index = sprite_stick2{sprite_index = sprite_stick3;stick=3;exit;}
        }
    if !sticknext{
        acting=false;
        alarm[0]=1;
        exit;
        }
}
if sprite_index = sprite_stick3 or sprite_index = sprite_sticka{
        acting=false;
        alarm[0]=1;
        exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw sprite on screen

///Display current gun
if sight{
    if P1_WEAPON != 2 and arms = -1{
        if sprite_index = sprite_Drun{draw_sprite_ext(ds_grid_get(guns,0,P1_WEAPON),image_index,gun_x,gun_y+(ds_grid_get(arm_position,0,image_index)),facing,image_yscale,270*facing,image_blend,image_alpha);}
        if sprite_index = sprite_Djump{draw_sprite_ext(ds_grid_get(guns,0,P1_WEAPON),image_index,gun_x,gun_y,facing,image_yscale,270*facing,image_blend,image_alpha);}
        }
//arms below body
if arms = -1{
         if sprite_index = sprite_idle{
            draw_sprite_ext(sprite_run_arm,0,x-1,y,facing,image_yscale,image_angle,image_blend,image_alpha);
        }
         if sprite_index = sprite_shoot{
            draw_sprite_ext(sprite_run_arm,0,x,y,facing,image_yscale,image_angle,image_blend,image_alpha);
        }
        if sprite_index = sprite_Drun{
            draw_sprite_ext(sprite_run_arm,0,x+(14*facing),y+4+(ds_grid_get(arm_position,0,image_index)),facing,image_yscale,270*facing,image_blend,image_alpha);
        }
        if sprite_index = sprite_Urun{
            draw_sprite_ext(sprite_run_arm,0,x+(-2*facing),y+16+(ds_grid_get(arm_position,0,image_index)),facing,image_yscale,90*facing,image_blend,image_alpha);
        }
        if sprite_index = sprite_Uidle{
            draw_sprite_ext(sprite_run_arm,0,x+(-6*facing),y+16,facing,image_yscale,90*facing,image_blend,image_alpha);
        }
        if sprite_index = sprite_Ujump{
            draw_sprite_ext(sprite_run_arm,0,x+(-3*facing),y+16,facing,image_yscale,90*facing,image_blend,image_alpha);
        }
      if sprite_index = sprite_Djump{
            draw_sprite_ext(sprite_run_arm,0,x+(15*facing),y+0,facing,image_yscale,270*facing,image_blend,image_alpha);
        }
        if sprite_index = sprite_run{
            draw_sprite_ext(sprite_run_arm,image_index,x,y,facing,image_yscale,image_angle,image_blend,image_alpha);
        }
         if sprite_index = sprite_jump{
            draw_sprite_ext(sprite_run_arm,0,x-1,y,facing,image_yscale,image_angle,image_blend,image_alpha);
        }
}
//Draw Body
    draw_sprite_ext(sprite_index,image_index,x,y,facing,image_yscale,image_angle,image_blend,image_alpha);
//Draw Legs
        if sprite_index = sprite_run{
        draw_sprite_ext(sprite_run_legs,image_index,x,y,facing,image_yscale,image_angle,image_blend,image_alpha);
        }
//Draw Arms above body
    if arms = -1{
        if sprite_index = sprite_Didle{
            draw_sprite_ext(sprite_run_arm,0,x+(13*facing),y+4,facing,image_yscale,270*facing,image_blend,image_alpha);
        }
    }  
//guns above body
    if P1_WEAPON != 2 and arms = -1{
        if sprite_index = sprite_Didle{draw_sprite_ext(ds_grid_get(guns,0,P1_WEAPON),image_index,gun_x,gun_y,facing,image_yscale,270*facing,image_blend,image_alpha);}
        if sprite_index = sprite_idle{draw_sprite_ext(ds_grid_get(guns,0,P1_WEAPON),image_index,gun_x,gun_y,facing,image_yscale,image_angle,image_blend,image_alpha);}
        if sprite_index = sprite_run{draw_sprite_ext(ds_grid_get(guns,0,P1_WEAPON),image_index,gun_x-(3*facing),gun_y+(ds_grid_get(arm_position,0,image_index)),facing,image_yscale,image_angle,image_blend,image_alpha);}
        if sprite_index = sprite_jump{draw_sprite_ext(ds_grid_get(guns,0,P1_WEAPON),image_index,gun_x,gun_y,facing,image_yscale,image_angle,image_blend,image_alpha);}
        if sprite_index = sprite_shoot{draw_sprite_ext(ds_grid_get(guns,0,P1_WEAPON),image_index,gun_x,gun_y,facing,image_yscale,image_angle,image_blend,image_alpha);}
        if sprite_index = sprite_Uidle{draw_sprite_ext(ds_grid_get(guns,0,P1_WEAPON),image_index,gun_x,gun_y,facing,image_yscale,90*facing,image_blend,image_alpha);}
        if sprite_index = sprite_Urun{draw_sprite_ext(ds_grid_get(guns,0,P1_WEAPON),image_index,gun_x,gun_y+(ds_grid_get(arm_position,0,image_index)),facing,image_yscale,90*facing,image_blend,image_alpha);}
        if sprite_index = sprite_Ujump{draw_sprite_ext(ds_grid_get(guns,0,P1_WEAPON),image_index,gun_x,gun_y,facing,image_yscale,90*facing,image_blend,image_alpha);}
        }
            
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto_previous();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Next Room DEBUG
if !keyboard_check(vk_alt){
    room_goto_next();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
