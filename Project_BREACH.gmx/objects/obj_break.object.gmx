<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_break</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_block</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed=0;
hp = 0;
///variables
//vertical speed
speedy=0;
//rate of being pulled down
speed_grav=.4;
//max falling speed
speed_fall=10;
//platform riding offset
hor=0;
ver=0;
pass = true;
drop = 0;
//1 = health
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite break on destroy
ww = sprite_get_width(sprite_index); //we need to know how wide

hh = sprite_get_height(sprite_index); //and how tall our sprite is

chunk = 5; //this is how big your chunks will be in pixels

for (i=0;i&lt;ww;i+=chunk) { //we loop 4 pixel at a time all the way across
 for (j=0;j&lt;hh;j+=chunk) { //while picking all the vertical pixels in each column
 particle = instance_create(x+i,y+j,PARTICLE); //we create a particle relative to the object, offset by the proper amount
 particle.spr = sprite_index; //we need to tell the particle which sprite to draw. in this case, it's drawing the sprite of the object that's creating it
 particle.size = chunk;
 particle.xx = i; //we'll need the particles to have these values so they can draw the right part of the sprite
 particle.yy = j;
 particle.depth = depth;
 }
 }
audio_play_sound_on(s_sfx,sound1,false,10);
scr_spoils(drop);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement
//always being pulled down
y += speedy;
//add gravity if nothing below
if !place_meeting(x,y+speedy,obj_block) and !place_meeting(x,y+speedy,obj_block_pass) {
    speedy += speed_grav;
    }
//zero pull if something below
if place_meeting(x,y+speedy,obj_block) or place_meeting(x,y+speedy,obj_block_pass) and speedy &gt;0{
    speedy = 0;
    }
//collision correction on overlap    
if place_meeting(x,y,obj_block) or place_meeting(x,y,obj_block_pass) {
    y -= 1;
    }
//find bounce and 'bounce' on collision
 bounce_snap = collision_rectangle( bbox_left, bbox_bottom, bbox_right, bbox_bottom+16, obj_bounce, false, true );
        if bounce_snap != noone and (speedy&gt;0){
                bounce_snap.image_speed = 1;
                speedy = -26 * 1.08;
            }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision Handle
//Find projectile
col = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,SHOT,false,true);
//Minus health on collide
if col != noone{
    image_index += col.dmg;
    event_user(0);
    instance_destroy(col,true);
    }
//destroy on hp 0
if image_index = image_number -1{
    instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player_shot_stick">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision Handle
//Minus health on collide
image_index += other.dmg;
event_user(0);
//destroy on hp 0
if image_index = image_number -1{
    instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Minor sprite break
ww = sprite_get_width(sprite_index); //we need to know how wide

hh = sprite_get_height(sprite_index); //and how tall our sprite is

chunk = 5; //this is how big your chunks will be in pixels

for (i=0;i&lt;ww;i+=chunk) { //we loop 4 pixel at a time all the way across
 for (j=0;j&lt;hh;j+=chunk) { //while picking all the vertical pixels in each column
 particle = instance_create(x+i,y+j,PARTICLE); //we create a particle relative to the object, offset by the proper amount
 particle.spr = sprite_index; //we need to tell the particle which sprite to draw. in this case, it's drawing the sprite of the object that's creating it
 particle.size = chunk;
 particle.xx = i; //we'll need the particles to have these values so they can draw the right part of the sprite
 particle.yy = j;
 particle.depth = depth;
 }
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
