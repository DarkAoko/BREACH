<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controller for game views.

//Use of views
view_enabled=true;
//Default view = 0
view_visible[0]=true;
//Normally follows the player
focus = PLAYER;
//Makes the camera zoom to target area
tracking=false;
//Target pos for tracking
targetx=0;
targety=0;
//View Settings
view_hborder[0]=832;
view_vborder[0]=512;

view_hport[0]=1080;
view_wport[0]=1920;

view_wview[0]=832;
view_hview[0]=512;

if ds_grid_value_exists(map_layout,0,0,0,ds_grid_height(map_layout),room){
    var val = ds_grid_value_y(map_layout,0,0,0,ds_grid_height(map_layout),room);
        ds_grid_set(map_layout,4,val,1);
        ds_grid_set(map_layout,5,val,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Follow target

if !tracking{
   view_object[0] = focus;
    x = focus.x;
    y = focus.y; 
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tracking Mode
if tracking{
        if(x != targetx)
    {
       if(abs(x-targetx) &lt; 1) { x = targetx }
       else
       {
           x += (targetx - x)*.025;
       }
    }
    if(y != targety)
    {
       if(abs(y-targety) &lt; 1) { y = targety }
       else
       {
           y += (targety - y)*.025;
       }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart variables
event_perform(ev_create,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main HUD
//Health
draw_set_color(c_black);
draw_rectangle(100,50,100 + sprite_get_width(spr_hud_health)-1, 50 + sprite_get_height(spr_hud_health),false);
draw_set_color(c_white);
//draw_rectangle(100,45,100 + sprite_get_width(spr_hud_health)-1,49,false);
//draw_rectangle(100,66,100 + sprite_get_width(spr_hud_health)-1,70,false);
draw_set_halign(fa_right);
draw_set_valign(fa_center);
draw_set_font(fnt_test);
draw_text_outline(100,50,PLAYER_HEALTH,c_white,c_black);
draw_sprite_part(spr_hud_health,0,0,0,(PLAYER_HEALTH/PLAYER_MAXHEALTH)*200,16,100,50);
//Power
draw_set_color(c_black);
draw_rectangle(100,75,100 + sprite_get_width(spr_hud_power)-1, 75 + sprite_get_height(spr_hud_power),false);
draw_set_color(c_white);
//draw_rectangle(100,70,100 + sprite_get_width(spr_hud_power)-1,74,false);
//draw_rectangle(100,86,100 + sprite_get_width(spr_hud_power)-1,90,false);
draw_set_halign(fa_right);
draw_set_valign(fa_center);
draw_set_font(fnt_test);
draw_text_outline(100,80,PLAYER_LEVEL,c_white,c_black);
draw_sprite_part(spr_hud_power,0,0,0,(PLAYER_POWER/100)*200,16,100,75);

if PLAYER_LEVEL = PLAYER_MAXLEVEL and PLAYER_POWER &gt;= 99{
    draw_set_color(c_black);
    draw_set_halign(fa_middle);
    draw_set_valign(fa_center);
    draw_sprite(spr_hud_max,0,100,75);
    }
//Weapons
if prize_shock{
    if P1_WEAPON  = 1{draw_sprite(spr_hud_slot_shock,1,420,50);}
    if P1_WEAPON != 1{draw_sprite(spr_hud_slot_shock,0,420,50);}
    if PLAYER_STATUS = 1{draw_sprite(spr_hud_emp,0,420,50);}
    }
if prize_stick{
    if P1_WEAPON  = 2{draw_sprite(spr_hud_slot_stick,1,480,50);}
    if P1_WEAPON != 2{draw_sprite(spr_hud_slot_stick,0,480,50);}
    }
if prize_burst{
    if P1_WEAPON  = 3{draw_sprite(spr_hud_slot_burst,1,540,50);}
    if P1_WEAPON != 3{draw_sprite(spr_hud_slot_burst,0,540,50);}
    if PLAYER_STATUS = 1{draw_sprite(spr_hud_emp,0,540,50);}
    }
if prize_blast{
    if P1_WEAPON  = 4{draw_sprite(spr_hud_slot_blast,1,600,50);}
    if P1_WEAPON != 4{draw_sprite(spr_hud_slot_blast,0,600,50);}
    if PLAYER_STATUS = 1{draw_sprite(spr_hud_emp,0,600,50);}
    }
//Map
draw_sprite(spr_map_grid,0,900,25);
var val = ds_grid_value_y(map_layout,0,0,0,ds_grid_height(map_layout),room);

//3x2
//does room exist?
if ds_grid_value_exists(map_layout,0,0,0,ds_grid_height(map_layout),room){
//store y of room values    
//draw square if visible/visited    
    var val2 = ds_grid_get(map_layout,4,val);
    if val2=true{draw_sprite(spr_map_room,0+ds_grid_get(map_layout,5,val),932,41);}
//top border if..    
    var val2 = ds_grid_get(map_layout,9,val);
    if val2=true{draw_sprite(spr_map_room_top,0,932,41);}
//bottom border if..    
    var val2 = ds_grid_get(map_layout,10,val);
    if val2=true{draw_sprite(spr_map_room_bottom,0,932,41);}
//left border if..    
    var val2 = ds_grid_get(map_layout,7,val);
    if val2=true{draw_sprite(spr_map_room_left,0,932,41);}
//right border if..    
    var val2 = ds_grid_get(map_layout,8,val);
    if val2=true{draw_sprite(spr_map_room_right,0,932,41);}
}
    
//4x2
//does room exist?
room_map = ds_grid_get(map_pos,ds_grid_get(map_layout,11,val)+1,ds_grid_get(map_layout,12,val));
if ds_grid_value_exists(map_layout,0,0,0,ds_grid_height(map_layout),room_map){
//store y of room values
    var val0 = ds_grid_value_y(map_layout,0,0,0,ds_grid_height(map_layout),room_map);
//draw square if visible/visited    
    var val2 = ds_grid_get(map_layout,4,val0);
    if val2=true{draw_sprite(spr_map_room,0+ds_grid_get(map_layout,5,val0),948,41);}
//top border if..    
    var val2 = ds_grid_get(map_layout,9,val0);
    if val2=true{draw_sprite(spr_map_room_top,0,948,41);}
//bottom border if..    
    var val2 = ds_grid_get(map_layout,10,val0);
    if val2=true{draw_sprite(spr_map_room_bottom,0,948,41);}
//left border if..    
    var val2 = ds_grid_get(map_layout,7,val0);
    if val2=true{draw_sprite(spr_map_room_left,0,948,41);}
//right border if..    
    var val2 = ds_grid_get(map_layout,8,val0);
    if val2=true{draw_sprite(spr_map_room_right,0,948,41);}       
}
//2x2
//does room exist?
room_map = ds_grid_get(map_pos,ds_grid_get(map_layout,11,val)-1,ds_grid_get(map_layout,12,val));
show_debug_message(room_map);
if ds_grid_value_exists(map_layout,0,0,0,ds_grid_height(map_layout),room_map){
//store y of room values
    var val0 = ds_grid_value_y(map_layout,0,0,0,ds_grid_height(map_layout),room_map);
//draw square if visible/visited    
    var val2 = ds_grid_get(map_layout,4,val0);
    if val2=true{draw_sprite(spr_map_room,0+ds_grid_get(map_layout,5,val0),916,41);}
//top border if..    
    var val2 = ds_grid_get(map_layout,9,val0);
    if val2=true{draw_sprite(spr_map_room_top,0,916,41);}
//bottom border if..    
    var val2 = ds_grid_get(map_layout,10,val0);
    if val2=true{draw_sprite(spr_map_room_bottom,0,916,41);}
//left border if..    
    var val2 = ds_grid_get(map_layout,7,val0);
    if val2=true{draw_sprite(spr_map_room_left,0,916,41);}
//right border if..    
    var val2 = ds_grid_get(map_layout,8,val0);
    if val2=true{draw_sprite(spr_map_room_right,0,916,41);}       
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
